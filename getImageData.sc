#!/usr/bin/env amm
/*
Ammonite script to download binary data for a CITE Image collection
documented in a simple .tsv file.

Input:  the script takes a file with four tab-delimited columns, in the order generated by iiifToCite.sc.  The four columns are

    Caption Urn Rights Source

Optionally, you may specify a file name extension:  the default is `jpg`. You may also specify an integer index to "startFrom": this defaults to 0 (first item), but if your download is interrupted, it can be convenient to resume at a specified point in the list of images.

Output: A series of binary image files.  The file names are the collection-object-version identifiers of the image's CITE URN, with periods replaced by underscore.  Example:  an image with URN `urn:cite:ecodices:bern87.8.v1` using the default `jpg` filename extension will be named `bern87_1_v1.jpg`

Requires:

- scala
- ammonite: http://www.lihaoyi.com/Ammonite/#ScalaScripts


Usage:

    getImageData.sc TSVFILE [EXTENSION] [STARTFROM]

Examples:

Download all images in this .tsv catalog:

        getImageData.sc bern87.tsv

Resume downloading from the 59th image (index 58):

    getImageData.sc -- bern87.tsv   --startFrom 58

*/

import scala.io.Source
import sys.process._
import java.net.URL
import java.io.File


// CITE Image model, including notation of source of image
case class Img(caption: String, urn: String, rights: String, src: String)


// Download a single image object
def downloadImg(img: Img, extension: String) {
    val nameParts = img.urn.split(":")
    val fName = nameParts(3).replaceAll("\\.", "_" ) + "." + extension
    new URL(img.src) #> new File(fName) !!
}

@main
def download(f: String, extension: String = "jpg", startFrom : Int = 0 ) = {
  val citeData = Source.fromFile(f).getLines.toVector
  val header = citeData.take(1)
  val data = citeData.drop(startFrom + 1)
  val imgs = data.map{ s =>
    val cols = s.split("\t")
    Img(cols(0), cols(1), cols(2), cols(3))
  }
  for (i <- imgs) {
    println("Downloading " + i.urn + " ... ")
    downloadImg(i, extension)
  }

}
